
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  species: 'species',
  breed: 'breed',
  birthDate: 'birthDate',
  weight: 'weight',
  color: 'color',
  gender: 'gender',
  clientId: 'clientId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VeterinarianScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  specialty: 'specialty',
  password: 'password',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VeterinarianScheduleScalarFieldEnum = {
  id: 'id',
  veterinarianId: 'veterinarianId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  isActive: 'isActive'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  petId: 'petId',
  veterinarianId: 'veterinarianId',
  dateTime: 'dateTime',
  duration: 'duration',
  serviceType: 'serviceType',
  reason: 'reason',
  status: 'status',
  bookingChannel: 'bookingChannel',
  veterinarianNotes: 'veterinarianNotes',
  diagnosis: 'diagnosis',
  treatment: 'treatment',
  reminderSent: 'reminderSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  entity: 'entity',
  entityId: 'entityId',
  action: 'action',
  details: 'details',
  userId: 'userId',
  channel: 'channel',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Client: 'Client',
  Pet: 'Pet',
  Veterinarian: 'Veterinarian',
  VeterinarianSchedule: 'VeterinarianSchedule',
  Appointment: 'Appointment',
  ActivityLog: 'ActivityLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/mac/dev/cats-appointments/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/mac/dev/cats-appointments/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../.env",
    "schemaEnvPath": "../.env"
  },
  "relativePath": "",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is the main schema for your veterinary platform\n// Prisma will use this to generate database migrations\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../prisma\"\n}\n\n// Represents the pet owners\nmodel Client {\n  id        String  @id @default(cuid())\n  firstName String\n  lastName  String\n  email     String  @unique\n  phone     String\n  address   String?\n  city      String?\n\n  // A client can have multiple pets\n  pets Pet[]\n\n  // Useful metadata for auditing\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"clients\")\n}\n\n// Pets belong to clients\nmodel Pet {\n  id        String    @id @default(cuid())\n  name      String\n  species   String // Dog, Cat, Bird, etc.\n  breed     String?\n  birthDate DateTime?\n  weight    Float?\n  color     String?\n  gender    String? // Male, Female\n\n  // Relationship with the owner\n  clientId String\n  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)\n\n  // A pet can have multiple appointments\n  appointments Appointment[]\n\n  // Simplified medical history\n  notes String? // Allergies, special conditions, etc.\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([clientId])\n  @@map(\"pets\")\n}\n\n// The veterinarians who work at the clinic\nmodel Veterinarian {\n  id        String  @id @default(cuid())\n  firstName String\n  lastName  String\n  email     String  @unique\n  phone     String\n  specialty String? // Surgery, Dermatology, General, etc.\n\n  // For admin panel login\n  password String // Must be hashed with bcrypt\n  role     String  @default(\"veterinarian\") // veterinarian, admin, receptionist\n  isActive Boolean @default(true)\n\n  // A veterinarian can have multiple appointments assigned\n  appointments Appointment[]\n\n  // Availability schedules\n  schedules VeterinarianSchedule[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"veterinarians\")\n}\n\n// Defines the working hours for each veterinarian\nmodel VeterinarianSchedule {\n  id String @id @default(cuid())\n\n  veterinarianId String\n  veterinarian   Veterinarian @relation(fields: [veterinarianId], references: [id], onDelete: Cascade)\n\n  dayOfWeek Int // 0=Sunday, 1=Monday, 2=Tuesday... 6=Saturday\n  startTime String // Format \"09:00\"\n  endTime   String // Format \"17:00\"\n\n  isActive Boolean @default(true)\n\n  @@index([veterinarianId])\n  @@map(\"veterinarian_schedules\")\n}\n\n// The heart of the system: appointments\nmodel Appointment {\n  id String @id @default(cuid())\n\n  // Relationships\n  petId String\n  pet   Pet    @relation(fields: [petId], references: [id])\n\n  veterinarianId String\n  veterinarian   Veterinarian @relation(fields: [veterinarianId], references: [id])\n\n  // Appointment information\n  dateTime DateTime // Date and time of the appointment\n  duration Int      @default(30) // Duration in minutes\n\n  serviceType String // General checkup, Vaccination, Surgery, Emergency, etc.\n  reason      String? // Description of the consultation reason\n\n  // Possible statuses: pending, confirmed, in_progress, completed, cancelled, no_show\n  status String @default(\"pending\")\n\n  // Channel through which it was booked\n  bookingChannel String // web, whatsapp, instagram, phone, in_person\n\n  // Internal notes\n  veterinarianNotes String? // What the veterinarian notes after the consultation\n  diagnosis         String?\n  treatment         String?\n\n  // Reminders sent\n  reminderSent Boolean @default(false)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([petId])\n  @@index([veterinarianId])\n  @@index([dateTime])\n  @@index([status])\n  @@map(\"appointments\")\n}\n\n// Log of important changes for auditing\nmodel ActivityLog {\n  id String @id @default(cuid())\n\n  entity   String // appointment, client, pet, veterinarian\n  entityId String // The ID of the affected record\n\n  action  String // create, update, cancel, delete\n  details String? // JSON with additional information\n\n  userId  String? // ID of the veterinarian/admin who made the change\n  channel String? // Where the action came from\n\n  createdAt DateTime @default(now())\n\n  @@index([entity, entityId])\n  @@index([createdAt])\n  @@map(\"activity_logs\")\n}\n",
  "inlineSchemaHash": "7a9c92c4729636201e78a801b9bf15572c23bdcfb5e261b0e0404aafbd661dbe",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Client\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pets\",\"kind\":\"object\",\"type\":\"Pet\",\"relationName\":\"ClientToPet\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"clients\"},\"Pet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"species\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"breed\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"birthDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"weight\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gender\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToPet\"},{\"name\":\"appointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToPet\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"pets\"},\"Veterinarian\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"specialty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"appointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToVeterinarian\"},{\"name\":\"schedules\",\"kind\":\"object\",\"type\":\"VeterinarianSchedule\",\"relationName\":\"VeterinarianToVeterinarianSchedule\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"veterinarians\"},\"VeterinarianSchedule\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"veterinarianId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"veterinarian\",\"kind\":\"object\",\"type\":\"Veterinarian\",\"relationName\":\"VeterinarianToVeterinarianSchedule\"},{\"name\":\"dayOfWeek\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":\"veterinarian_schedules\"},\"Appointment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"petId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pet\",\"kind\":\"object\",\"type\":\"Pet\",\"relationName\":\"AppointmentToPet\"},{\"name\":\"veterinarianId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"veterinarian\",\"kind\":\"object\",\"type\":\"Veterinarian\",\"relationName\":\"AppointmentToVeterinarian\"},{\"name\":\"dateTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"serviceType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookingChannel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"veterinarianNotes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"diagnosis\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"treatment\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reminderSent\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"appointments\"},\"ActivityLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entity\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entityId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"details\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"channel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"activity_logs\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

